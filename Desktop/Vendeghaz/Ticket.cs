// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Vendeghaz;
//
//    var ticket = Ticket.FromJson(jsonString);

namespace Vendeghaz
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Xml.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using static System.Windows.Forms.VisualStyles.VisualStyleElement.TaskbarClock;

    public partial class Ticket
    {
        [JsonProperty("t_id")]
        public long T_id { get; set; }

        [JsonProperty("t_name")]
        public string T_name { get; set; }

        [JsonProperty("t_email")]
        public string T_email { get; set; }

        [JsonProperty("t_date")]
        public DateTimeOffset T_date { get; set; }

        [JsonProperty("t_time")]
        public string T_time { get; set; }

        [JsonProperty("t_piece")]
        public long T_piece { get; set; }

        [JsonProperty("t_amount")]
        public long T_amount { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset Created_at { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset? Updated_at { get; set; }

        [JsonProperty("deleted_at")]
        public object Deleted_at { get; set; }

        public override string ToString()
        {
            return T_name;
        }
    }
    public enum T_time {a, b};

    internal class T_timeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(T_time) || t == typeof(T_time?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "a":
                    return T_time.a;
                case "b":
                    return T_time.b;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (T_time)untypedValue;
            switch (value)
            {
                case T_time.a:
                    serializer.Serialize(writer, "a");
                    return;
                case T_time.b:
                    serializer.Serialize(writer, "b");
                    return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly T_timeConverter Singleton = new T_timeConverter();
    }

    public partial class Ticket
    {
        public static Ticket[] FromJson(string json) => JsonConvert.DeserializeObject<Ticket[]>(json, Vendeghaz.TicketConverter.Settings);
    }

    public static class TicketSerialize
    {
        public static string ToJson(this Ticket[] self) => JsonConvert.SerializeObject(self, Vendeghaz.TicketConverter.Settings);
    }

    internal static class TicketConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

