// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Vendeghaz;
//
//    var workers = Workers.FromJson(jsonString);

namespace Vendeghaz
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Xml.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;


    public partial class Workers
    {
        [JsonProperty("w_id")]
        public long W_id { get; set; }

        [JsonProperty("w_name")]
        public string W_name { get; set; }

        [JsonProperty("w_password")]
        public string W_password { get; set; }

        [JsonProperty("w_role")]
        public string W_role { get; set; }

        public override string ToString()
        {
            return W_name;
        }

    }

    public enum W_role { admin, dolgozó };

    internal class W_roleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(W_role) || t == typeof(W_role?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "admin":
                    return W_role.admin;
                case "dolgozó":
                    return W_role.dolgozó;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (W_role)untypedValue;
            switch (value)
            {
                case W_role.admin:
                    serializer.Serialize(writer, "admin");
                    return;
                case W_role.dolgozó:
                    serializer.Serialize(writer, "dolgozó");
                    return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly W_roleConverter Singleton = new W_roleConverter();
    }


    public partial class Workers
    {
        public static Workers[] FromJson(string json) => JsonConvert.DeserializeObject<Workers[]>(json, Vendeghaz.WorkersConverter.Settings);
    }

    

    /**/
    public static class WorkersSerialize
    {
        public static string ToJson(this Workers[] self) => JsonConvert.SerializeObject(self, Vendeghaz.WorkersConverter.Settings);
    }

    internal static class WorkersConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
